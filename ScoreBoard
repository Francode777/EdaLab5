import java.util.ArrayList;

public class ScoreBoard {
    private BST winTree = new BST();
    private HashST player = new HashST();
    private int playedGame = 0;

    public void addGameResult(String ganador, String perdedor, boolean empate) {
        registerPlayer(ganador);
        registerPlayer(perdedor);

        Player a = player.obtener(ganador);
        Player b = player.obtener(perdedor);

        eliminarJugador(a);
        eliminarJugador(b);

        if (empate) {
            a.addDraw();
            b.addDraw();
        } else {
            a.addWin();
            b.addLoss();
        }

        agregarJugador(a);
        agregarJugador(b);
        playedGame++;
    }

    public void registerPlayer(String nombre) {
        if (!player.contiene(nombre)) {
            Player nuevo = new Player(nombre);
            player.agregar(nombre, nuevo);
            winTree.insertar(0, nombre);
        }
    }

    public boolean checkPlayer(String nombre) {
        return player.contiene(nombre);
    }

    private void eliminarJugador(Player p) {
        winTree.eliminar(p.getWins(), p.getPlayerName());
    }

    private void agregarJugador(Player p) {
        winTree.insertar(p.getWins(), p.getPlayerName());
    }

    public Player[] winRange(int max, int min) {
        if (max < min) {
            System.out.println("Error de rangos");
            return new Player[0];
        }
        ArrayList<Player> resultado = new ArrayList<>();
        ArrayList<Integer> claves = winTree.clavesEntre(min, max);
        for (int w : claves) {
            ArrayList<String> nombres = winTree.obtener(w);
            for (String n : nombres) {
                resultado.add(player.obtener(n));
            }
        }
        return resultado.toArray(new Player[0]);
    }

    public ArrayList<String> winSuccessor(int wins) {
        ArrayList<String> lista = new ArrayList<>();
        Integer siguiente = winTree.sucesor(wins);
        if (siguiente != null) {
            lista.addAll(winTree.obtener(siguiente));
        }
        return lista;
    }

    public void printPlayers() {
        for (Player p : player.todos()) {
            System.out.println(p.getPlayerName() + " â†’ Wins: " + p.getWins() + ", Draws: " + p.getDraws() + ", Losses: " + p.getLosses());
        }
    }
}
